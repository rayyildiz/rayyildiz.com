<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Ramazan AYYILDIZ</title><link>https://rayyildiz.com/tags/rust/</link><description>Recent content in rust on Ramazan AYYILDIZ</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 15 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://rayyildiz.com/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Async pattern in Rust and CSP</title><link>https://rayyildiz.com/posts/async-in-rust-vs-csp/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rayyildiz.com/posts/async-in-rust-vs-csp/</guid><description>Asynchronous programming in Rust has sparked considerable debate within the programming community. On one side, advocates argue that async enhances performance and scalability, especially in I/O-bound and high-concurrency applications. On the other side, critics point to its complexity and potential for complicating the codebase. To fully understand this debate, it&amp;rsquo;s crucial to examine the differences between asynchronous programming and the Communicating Sequential Processes (CSP) model, particularly as implemented through channels in Rust.</description></item><item><title>How Android Uses Rust for Enhanced Memory Safety</title><link>https://rayyildiz.com/posts/android-uses-rust-for-memory-safety/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://rayyildiz.com/posts/android-uses-rust-for-memory-safety/</guid><description>Android, the widely used mobile operating system developed by Google, has recently started incorporating the Rust programming language to enhance its memory safety. This move signifies a major shift in Android&amp;rsquo;s approach to system-level programming, primarily dominated by C and C++.
The Challenge with C and C++ Link to heading Traditionally, Android&amp;rsquo;s core system components have been written in C/C++, known for their performance and control over system resources. However, these languages come with significant challenges, particularly in memory safety.</description></item><item><title>Introduction to Rust Programming Language</title><link>https://rayyildiz.com/posts/introduction-to-rust-language/</link><pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate><guid>https://rayyildiz.com/posts/introduction-to-rust-language/</guid><description>What is Rust? Link to heading Rust is an open-source systems programming language known for its focus on safety and performance. Developed by Graydon Hoare at Mozilla Research, it was first released in 2015. Rust offers memory safety without using a garbage collector, making it a valuable tool in system-level development where efficiency is critical.
Key Features of Rust Link to heading Safety: Rust&amp;rsquo;s biggest selling point is its emphasis on memory safety.</description></item><item><title>Rust vs. Go: Exploring the Differences</title><link>https://rayyildiz.com/posts/rust-vs-go/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><guid>https://rayyildiz.com/posts/rust-vs-go/</guid><description>Introduction Link to heading In the vast landscape of programming languages, Rust and Go stand out as two compelling choices for developers seeking modern solutions to their software development needs. Both languages have gained significant traction and popularity in recent years, each with its unique set of features, strengths, and use cases. In this post, we&amp;rsquo;ll delve into the differences between Rust and Go, highlighting their key characteristics, use cases, and trade-offs, helping developers make informed decisions when choosing the right language for their projects.</description></item></channel></rss>