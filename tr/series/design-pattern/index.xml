<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Pattern on Ramazan AYYILDIZ</title><link>https://rayyildiz.com/tr/series/design-pattern/</link><description>Recent content in Design Pattern on Ramazan AYYILDIZ</description><generator>Hugo</generator><language>tr</language><lastBuildDate>Sat, 28 Aug 2010 00:00:00 +0000</lastBuildDate><atom:link href="https://rayyildiz.com/tr/series/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Yapıcı Tasarım Deseni (Builder Design Pattern)</title><link>https://rayyildiz.com/tr/posts/java-ile-tasarim-desenleri-yapici-tasarim-deseni/</link><pubDate>Sat, 28 Aug 2010 00:00:00 +0000</pubDate><guid>https://rayyildiz.com/tr/posts/java-ile-tasarim-desenleri-yapici-tasarim-deseni/</guid><description>&lt;p>Tasarım desenleri hakkında giriş mahiyetindeki yazıma buradan ulaşabilirsiniz. Bu tasarım desenlerinden yaratım desenleri grubundaki ikinci desen yapıcı tasarım desenidir (Builder Design Pattern).&lt;/p>
&lt;p>Yapıcı tasarım deseni, nesnelerin yapıcı metotlarını soyutlamak suretiyle gerçekleştirilmilerin farklı şekilde vekalet edilmesine sağlar. Peki bu nasıl olmaktadır, bunu bir örnekle pekiştirelim. Örneğin kahve yapıyorsunuz, kahve bildiğiniz gibi her ülkede farklı yapılır. Türkiye’de kahve küçük fincanda, genellikle şekerli olurken,- Brezilyadaki kahve aynı şekilde servis edilmez. Daha sonra yazılarımda göreceğiniz gibi Yapıcı tasarım modeli fabrika tasarım modeline benzer. Hatta soyut fabrika tasarım modeli ile de aynı şekilde yapabilirsiniz. Ancak bazı farklar vardır. Mesela yapıcı tasarım modelinde product dediğimiz nesnelerimiz soyut olmaz, bu nesnelerin farklı olmasını soyutlanmış yapıcı nesneler sağlar.&lt;/p></description></item><item><title>Fabrika Yöntemi Tasarım Deseni ( Factory Method )</title><link>https://rayyildiz.com/tr/posts/java-ile-tasarim-desenleri-fabrika-yontemi/</link><pubDate>Thu, 12 Aug 2010 00:00:00 +0000</pubDate><guid>https://rayyildiz.com/tr/posts/java-ile-tasarim-desenleri-fabrika-yontemi/</guid><description>&lt;p>Tasarım desenleri hakkında giriş mahiyetindeki yazıma &lt;a href="https://rayyildiz.com/tr/posts/java-ile-tasarim-desenleri/" >buradan&lt;/a> ulaşabilirsiniz. Bu tasarım desenlerinden yaratım desenleri grubundaki ücüncü desen fabrika tasarım desenidir ( Factory Method)&lt;/p>
&lt;p>Fabrika yöntemi tasarım deseni,birçok framework yaygın bir şekilde kullanılan bir tasarım desenidir. Bu tasarım deseninde, parelel seviyedeki nesnelerin hangisinin oluşmasını gerektiğini karar veren bir fabrika metodunu ifade eder. Yani aynı arayüz ( interface) gerçekleştiren paralel sınıfların hangisinin gerçekleşmesini sağlayan bir nesne sayesinde bu ilşemi gerçekleştirebiliriz.&lt;/p>
&lt;p>Örneğimiz üzerinden düşünelim. örnekte IDbConnection adında bir arayüzümüz mevcut olup, bu arayüzü OracleDbConnection, MySqlDbConnection ve MssqlDbConnection adında 3 tane nesne vardır. Bu üç nesneden hangisinin oluşması gerektiğini karar veren DbConnectionFactory adında bir nesnemiz var. Bu DbConnectionFactory nesnesi içinde yer alan static bir metod ve (metodun adı : createDbConnection)¬† metoda geçirilen parametreden hangi nesneyi gerçekleştireceğine karar verir.&lt;/p></description></item><item><title>Soyut Fabrika Tasarım Deseni (Abstract Factory)</title><link>https://rayyildiz.com/tr/posts/java-ile-tasarim-desenleri-soyut-tasarim-deseni/</link><pubDate>Tue, 10 Aug 2010 00:00:00 +0000</pubDate><guid>https://rayyildiz.com/tr/posts/java-ile-tasarim-desenleri-soyut-tasarim-deseni/</guid><description>&lt;p>Tasarım desenleri hakkında giriş mahiyetindeki yazıma buradan ulaşabilirsiniz. Bu tasarım desenlerinden ilki olan soyut fabrika tasarım deseni (Abstract Factory) bu yazımızda genel olarak göreceğiz.&lt;/p>
&lt;p>Soyut fabrika tasarım deseninin amacı, farklı ürün ailelerin için uygulanması söz konusu olduğu durumlarda tercih edilir. Mesela yazdığınız uygulamanın hem macos hem de windows platformunda çalışması sözkonusu olduğu durumlarda UI nasıl oluşması gerektiğini soyutlandırarak daha hızlı adapte edebileceğiniz bir yapı geliştirebilirsiniz.&lt;/p>
&lt;p>Şekilde de görebileceğiniz gibi Application, hangi platformda çalıştığını bilmez, Application sadece GUIFactory arayüzünden uygulanmış bir nesne geelcektir. Burada hem macos için hem de windows için birer tane factory ve birer tane de Button nesneleri geliştirmeniz gerekir ancak asıl Application nesneniz işletim sistemine göre dallanmayacak ve daha sade bir yapıda olacaktır.&lt;/p></description></item><item><title>Tasarım Desenleri (Design Pattern)</title><link>https://rayyildiz.com/tr/posts/java-ile-tasarim-desenleri/</link><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid>https://rayyildiz.com/tr/posts/java-ile-tasarim-desenleri/</guid><description>&lt;p>Yazılım geliştirmse süreciyle uğraşıyorsanız, özellikle nesneye dayalı programlama (&lt;a href="http://en.wikipedia.org/wiki/Object-oriented" class="external-link" target="_blank" rel="noopener">Object Oriented Programming&lt;/a>)- ile uğraşıyorsanız mutlaka görmüşsünüzdür. Peki tam olarak nedir tasarım desenleri?&lt;/p>
&lt;p>&lt;a href="http://tr.wikipedia.org/wiki/Tasar%C4%B1m_%C3%B6r%C3%BCnt%C3%BCleri" class="external-link" target="_blank" rel="noopener">Tasarım desenleri&lt;/a> (&lt;a href="http://en.wikipedia.org/wiki/Design_pattern_%28computer_science%29" class="external-link" target="_blank" rel="noopener">Design Patterns&lt;/a>), bir yazılımın değişik durumlarda nasıl davranabileceğine ışık tutan şablondur. Herhangi bir programa dili bağımlı değildir. Projenizde oluşabilecek durumlar karşısında nasıl bir çözüm bulmanız gerektiği konusunda size ışık tutar. Özellikle daha önce sizin karşılaştığınız sorunların benzerleri için geliştirildiğinden size yardımcı olacaktır. Geliştirdiğiniz uygulama nasıl bir yapıda olduğu, ileride yeni özelliklerin eklenebileceği, farklı platformlarda çalışabilmesi… gibi yeni gelecek özelliklere çok hızlı adapte olabilmek için size bazı şablonlar sunar. Bu sayede, tüm uygulamayı yeniden yazmanız gerek kalmaz.&lt;/p></description></item></channel></rss>